#shader vertex
#version 330 core
layout(location=0)in vec3 position;
layout(location=1)in vec3 Normal;
layout(location=2)in vec2 TexCoord;
layout(std140)uniform ExampleBlock
{
    mat4 projection;
    mat4 view;
};
out VS_OUT
{
    vec2 v_TexCoord;
}vs_out;


uniform mat4 model;

void main()
{
    vs_out.v_TexCoord=TexCoord;
    gl_Position=vec4(position,1.0);
}

#shader geometry
#version 330 core
layout(triangles)in;
layout(triangle_strip,max_vertices=3)out;
layout(std140)uniform ExampleBlock
{
    mat4 projection;
    mat4 view;
};
in VS_OUT
{
    vec2 v_TexCoord;
}gs_in[];

out vec2 texCoord;
uniform mat4 model;
uniform float time;
vec4 explode(vec4 Pos,vec3 normal)
{
    float magnitude=2.0;
    vec3 direction=normal*((sin(time)+1.0)/2.0)*magnitude;
    return Pos+vec4(direction,0.0);
}
vec3 GetNormal()
{
    vec3 a=vec3(gl_in[0].gl_Position)-vec3(gl_in[1].gl_Position);
    vec3 b=vec3(gl_in[2].gl_Position)-vec3(gl_in[1].gl_Position);
    return normalize(cross(b,a));
}
void main()
{
    vec3 normal=GetNormal();
    mat4 mvp=projection*view*model;
    gl_Position=mvp*explode(gl_in[0].gl_Position,normal);
    texCoord=gs_in[0].v_TexCoord;
    EmitVertex();
    gl_Position=mvp*explode(gl_in[1].gl_Position,normal);
    texCoord=gs_in[1].v_TexCoord;
    EmitVertex();
    gl_Position=mvp*explode(gl_in[2].gl_Position,normal);
    texCoord=gs_in[2].v_TexCoord;
    EmitVertex();
    EndPrimitive();
}

#shader fragment
#version 330 core
in vec2 texCoord;
out vec4 FragColor;
uniform sampler2D diffuse1;
void main()
{
    FragColor=texture(diffuse1,texCoord);
}